@model RunDetailViewModel

<div class="card border-secondary">
    <div class="card-header">
        <h2>Info</h2>
    </div>
    <div class="card-body">
        <ul class="list-group">
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>Outcome</span>
                @await Html.PartialAsync("_OutcomeBadge", Model.Analytics.Outcome)
            </li>
            @if (Model.Analytics.Index != 0)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>Index</span>
                    <span>@Model.Analytics.Index</span>
                </li>
            }
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>World</span>
                <span>@Model.Analytics.World.Name</span>
            </li>
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>Seed</span>
                <span>@Model.Import.LevelNbt.Seed</span>
            </li>
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>Difficulty</span>
                <span>
                    @if (Model.Import.LevelNbt.IsHardcore)
                    {
                        <span class="badge badge-danger badge-pill">Hardcore</span>
                    }
                    else if (Model.Import.LevelNbt.Difficulty == TheFipster.Minecraft.Core.Domain.Difficulty.Hard)
                    {
                        <span class="badge badge-warning badge-pill">@Model.Import.LevelNbt.Difficulty</span>
                    }
                    else if (Model.Import.LevelNbt.Difficulty == TheFipster.Minecraft.Core.Domain.Difficulty.Normal)
                    {
                        <span class="badge badge-success badge-pill">@Model.Import.LevelNbt.Difficulty</span>
                    }
                    else if (Model.Import.LevelNbt.Difficulty == TheFipster.Minecraft.Core.Domain.Difficulty.Easy)
                    {
                        <span class="badge badge-info badge-pill">@Model.Import.LevelNbt.Difficulty</span>
                    }
                    else if (Model.Import.LevelNbt.Difficulty == TheFipster.Minecraft.Core.Domain.Difficulty.Peaceful)
                    {
                        <span class="badge badge-light badge-pill">@Model.Import.LevelNbt.Difficulty</span>
                    }
                </span>
            </li>
            @if (Model.Analytics.Timings.FinishedOn.HasValue)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span data-toggle="tooltip" data-placement="right" title="Official timing from start to first person entering exit portal.">
                        Runtime
                        <i class="fas fa-question-circle help-bubble"></i>
                    </span>
                    @if (Model.Analytics.Timings.RunTime.TotalHours >= 1)
                    {
                        @Model.Analytics.Timings.RunTime.ToString(@"hh\:mm\:ss\:fff")
                    }
                    else
                    {
                        @Model.Analytics.Timings.RunTime.ToString(@"mm\:ss\:fff")
                    }
                </li>
            }
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span data-toggle="tooltip" data-placement="right" title="Time from first person entering server until last person exits or server shuts down.">
                    Playtime
                    <i class="fas fa-question-circle help-bubble"></i>
                </span>
                <span>@Model.Analytics.Timings.PlayTime</span>
            </li>
            @if (Model.Manuals != null && !string.IsNullOrEmpty(Model.Manuals.YoutubeLink))
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    Youtube
                    <a href="@Model.Manuals.YoutubeLink" target="_blank" class="btn btn-outline-danger btn-sm">watch</a>
                </li>
            }

            <li class="list-group-item d-flex justify-content-between align-items-center">
                Map
                @if (Model.MapRender.IsCompleted)
                {
                    <a href="@($"{Model.OverviewerUrl}{Html.Encode(Model.Analytics.Worldname)}")" target="_blank" class="btn btn-outline-success btn-sm">show</a>
                }
                else if (Model.MapRender.IsActive)
                {
                    <span>Render in progress</span>
                }
                else if (Model.MapRender.Position > 0)
                {
                    var ahead = Model.MapRender.QueueLength - Model.MapRender.Position;

                    if (ahead == 0)
                    {
                        <span>next in line</span>

                    }
                    else if (ahead == 1)
                    {
                        <span>1 job ahead</span>
                    }
                    else
                    {
                        <span>@ahead jobs ahead</span>
                    }
                }
                else
                {
                    <a class="btn btn-outline-primary btn-sm" asp-controller="Run" asp-action="RenderMap" asp-route-worldname="@Model.Analytics.Worldname">render it!</a>
                }
            </li>
        </ul>
    </div>
</div>