@using TheFipster.Minecraft.Speedrun.Domain
@model RunDetailViewModel
@{
    Player player = (Player)ViewData["Player"];
}

<div class="card border-secondary">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h2>@player.Name</h2>
        @await Html.PartialAsync("_PlayerAvatarSmall", player.Id)
    </div>
    <div class="card-body">
        @if (Model.Run.Stats.Any(x => x.PlayerId == player.Id))
        {
            <h3>Stats</h3>
            <ul class="list-group">
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>Kills</span>
                    <span>@Model.Run.Stats.First(x => x.PlayerId == player.Id).Killed.Sum(x => x.Value)</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>Deaths</span>
                    <span>@Model.Run.Stats.First(x => x.PlayerId == player.Id).KilledBy.Sum(x => x.Value)</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>Items Crafted</span>
                    <span>@Model.Run.Stats.First(x => x.PlayerId == player.Id).Crafted.Sum(x => x.Value)</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>Items picked up</span>
                    <span>@Model.Run.Stats.First(x => x.PlayerId == player.Id).PickedUp.Sum(x => x.Value)</span>
                </li>
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <span>Items dropped</span>
                    <span>@Model.Run.Stats.First(x => x.PlayerId == player.Id).Dropped.Sum(x => x.Value)</span>
                </li>
            </ul>
        }
        @if (Model.PlayerEvents.ContainsKey(player.Id) && Model.PlayerEvents[player.Id].Any())
        {
            <h3>Advancements</h3>
            <ul class="list-group">
                @foreach (var gameEvent in Model.PlayerEvents[player.Id].OrderBy(x => x.Timestamp))
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>
                            @if (Model.Run.Timings.StartedOn.HasValue)
                            {
                                @(gameEvent.Timestamp - Model.Run.Timings.StartedOn.Value)
                            }
                            else
                            {
                                @gameEvent.Timestamp.ToString("HH:mm:ss")
                            }
                        </span>
                        <span>@gameEvent.Data</span>
                    </li>
                }
            </ul>
        }
        @if (Model.Run.Stats.Any(x => x.PlayerId == player.Id))
        {
            @if (Model.Run.Stats.First(x => x.PlayerId == player.Id).Killed.Any())
            {
                <h3>Kills</h3>
                <ul class="list-group">
                    @foreach (var kill in Model.Run.Stats.First(x => x.PlayerId == player.Id).Killed.OrderByDescending(x => x.Value))
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>@kill.Key</span>
                            <span>@kill.Value</span>
                        </li>
                    }
                </ul>
            }

            @if (Model.Run.Stats.First(x => x.PlayerId == player.Id).KilledBy.Any())
            {
                <h3>Deaths</h3>
                <ul class="list-group">
                    @foreach (var kill in Model.Run.Stats.First(x => x.PlayerId == player.Id).KilledBy.OrderByDescending(x => x.Value))
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>@kill.Key</span>
                            <span>@kill.Value</span>
                        </li>
                    }
                </ul>
            }
        }
    </div>
</div>