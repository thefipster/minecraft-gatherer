@model RunListViewModel
@{
    ViewData["Title"] = "Runs";
    int count = Model.Runs.Count();
}

<div class="row">
    <div class="col">
        <h1>Started Runs & Resets</h1>
    </div>
</div>

<div class="row">
    <div class="col">
        <div class="btn-group" role="group">
            <a class="btn btn-secondary" asp-controller="Runs" asp-action="Index">Finished</a>
            <a class="btn btn-secondary" asp-controller="Runs" asp-action="Started">All Started</a>
            <a class="btn btn-primary">and resets</a>
            <a class="btn btn-secondary" asp-controller="Runs" asp-action="Garbage">and all else</a>
        </div>
    </div>
</div>

<div class="row">
    <div class="col">
        <table class="table table-hover">
            <tbody>
                @foreach (var run in Model.Runs.OrderByDescending(x => x.World.CreatedOn))
                {
                    <tr>
                        <td>
                            <a asp-controller="Run" asp-action="Index" asp-route-index="@run.Index">
                                <strong>@($"#{run.Index}")</strong>
                            </a>
                        </td>
                        <td>
                            <a asp-controller="Run" asp-action="Index" asp-route-index="@run.Index">
                                @run.World.CreatedOn.ToLocalTime().AddHours(1).ToString("dd. MMM yyyy - HH:mm:ss")
                            </a>
                        </td>
                        <td>
                            <time class="timeago" datetime="@run.World.CreatedOn.ToLocalTime().AddHours(1).ToString("s")"></time>
                        </td>
                        <td>
                            @foreach (var player in run.Players.OrderBy(x => x.Name))
                            {
                                <img class="avatar-small" src="@($"/speedrun/img/players/{player.Id}.png")" />
                            }
                        </td>
                        <td>
                            @switch (run.Outcome.State)
                            {
                                case TheFipster.Minecraft.Speedrun.Domain.Outcomes.Finished:
                                    {
                                        <span class="badge badge-success">@run.Outcome.State</span>
                                        break;
                                    }
                                case TheFipster.Minecraft.Speedrun.Domain.Outcomes.ResetEnd:
                                    {
                                        <span class="badge badge-secondary">@run.Outcome.State</span>
                                        break;
                                    }
                                case TheFipster.Minecraft.Speedrun.Domain.Outcomes.ResetStronghold:
                                    {
                                        <span class="badge badge-primary">@run.Outcome.State</span>
                                        break;
                                    }
                                case TheFipster.Minecraft.Speedrun.Domain.Outcomes.ResetNether:
                                    {
                                        <span class="badge badge-danger">@run.Outcome.State</span>
                                        break;
                                    }
                                case TheFipster.Minecraft.Speedrun.Domain.Outcomes.ResetSpawn:
                                    {
                                        <span class="badge badge-light">@run.Outcome.State</span>
                                        break;
                                    }
                            }
                        </td>
                    </tr>
                    count--;
                }
            </tbody>
        </table>
    </div>
</div>
