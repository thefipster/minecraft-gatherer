@model HomeIndexViewModel
@{
    ViewData["Title"] = "Home";

    var mobs = new List<string>
{
        "/speedrun/img/mobs/enderman.png",
        "/speedrun/img/mobs/creeper.png",
        "/speedrun/img/mobs/ghast.png",
        "/speedrun/img/mobs/zombie.png"
    };

    var randomMob = mobs[new Random().Next(0, 4)];
}

<div class="jumbotron text-center">

    <img class="rounded greetings-mob" height="150" width="150" src="@randomMob" />
    <h1 class="display-4">Hello christian speedrunner!</h1>
</div>

<div class="row">
    <div class="col">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Just show me the runs</h5>
                <p class="card-text">Well not all the runs... but at least those I was able to analyse.</p>
                <a asp-controller="Runs" asp-action="Index" class="btn btn-primary">Go there</a>
            </div>
        </div>
    </div>
    <div class="col">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Synchronize world folders</h5>
                <p class="card-text">Check if there are unknown worlds left in the depths of the minecraft realms.</p>
                <a asp-controller="Import" asp-action="Index" class="btn btn-primary">Sync</a>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col">
        <div class="card border-secondary">
            <div class="card-header">
                <h2>Latest Runs that actually started</h2>
            </div>
            <div class="card-body">
                <ul class="list-group">
                    @foreach (var run in Model.LatestRuns.OrderByDescending(x => x.World.CreatedOn))
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            <span>
                                <a asp-controller="Run" asp-action="Index" asp-route-index="@run.Index">
                                    @($"#{run.Index}")
                                </a>
                            </span>
                            <span>
                                @foreach (var player in run.Players.OrderBy(x => x.Name))
                                {
                                    <img class="avatar-small" src="@($"/speedrun/img/players/{player.Id}.png")" />
                                }
                            </span>
                            @switch (run.Outcome.State)
                            {
                                case TheFipster.Minecraft.Speedrun.Domain.Outcomes.Finished:
                                    {
                                        <span class="badge badge-success">@run.Outcome.State</span>
                                        break;
                                    }
                                case TheFipster.Minecraft.Speedrun.Domain.Outcomes.ResetEnd:
                                    {
                                        <span class="badge badge-secondary">@run.Outcome.State</span>
                                        break;
                                    }
                                case TheFipster.Minecraft.Speedrun.Domain.Outcomes.ResetStronghold:
                                    {
                                        <span class="badge badge-primary">@run.Outcome.State</span>
                                        break;
                                    }
                                case TheFipster.Minecraft.Speedrun.Domain.Outcomes.ResetNether:
                                    {
                                        <span class="badge badge-danger">@run.Outcome.State</span>
                                        break;
                                    }
                                case TheFipster.Minecraft.Speedrun.Domain.Outcomes.ResetSpawn:
                                    {
                                        <span class="badge badge-light">@run.Outcome.State</span>
                                        break;
                                    }
                            }
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <div class="col">
        <div class="card border-secondary">
            <div class="card-header">
                <h2>Server Properties</h2>
            </div>
            <div class="card-body">
                <ul class="list-group">
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>World</span>
                        <span class="badge badge-primary">@Model.ServerProperties.LevelName</span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>View Distance</span>
                        <span class="badge badge-primary">@Model.ServerProperties.ViewDistance chunks</span>
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>Seed</span>
                        @if (Model.ServerProperties.LevelSeed.HasValue)
                        {
                            <span class="badge badge-danger">@Model.ServerProperties.LevelSeed</span>
                        }
                        else
                        {
                            <span class="badge badge-primary">random</span>
                        }
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>Difficulty</span>
                        @switch (Model.ServerProperties.Difficulty)
                        {
                            case "peaceful":
                                {
                                    <span class="badge badge-danger">@Model.ServerProperties.Difficulty</span>
                                    break;
                                }
                            case "easy":
                                {
                                    <span class="badge badge-success">@Model.ServerProperties.Difficulty</span>
                                    break;
                                }
                            case "normal":
                                {
                                    <span class="badge badge-primary">@Model.ServerProperties.Difficulty</span>
                                    break;
                                }
                            case "hard":
                                {
                                    <span class="badge badge-warning">@Model.ServerProperties.Difficulty</span>
                                    break;
                                }
                        }
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>Gamemode</span>
                        @if (Model.ServerProperties.GameMode == "survival")
                        {
                            <span class="badge badge-primary">@Model.ServerProperties.GameMode</span>
                        }
                        else
                        {
                            <span class="badge badge-danger">@Model.ServerProperties.GameMode</span>
                        }
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>Spawn Protection</span>
                        @if (Model.ServerProperties.SpawnProtection == 0)
                        {
                            <span class="badge badge-primary">off</span>
                        }
                        else
                        {
                            <span class="badge badge-danger">@Model.ServerProperties.SpawnProtection blocks</span>
                        }
                    </li>
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span>Broadcast Console</span>
                        @if (Model.ServerProperties.IsConsoleBroadcastEnabled)
                        {
                            <span class="badge badge-primary">on</span>
                        }
                        else
                        {
                            <span class="badge badge-danger">off</span>
                        }
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>
