@model WorldIndexViewModel
@{
    ViewData["Title"] = "Synchronize";
    int count = Model.Runs.Count();
}

<div class="jumbotron text-center">

    <img class="rounded greetings-mob" height="150" width="150" src="/speedrun/img/blocks/chest.png" />
    <h1 class="display-4">Storage Sync</h1>
    <p class="lead">Lets take a look into the server chest and see what worlds we can discover.</p>
</div>

<div class="row">
    @if (Model.Runs.Count() == 0)
    {
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Same old</h5>
                    <p class="card-text">Looks like there was nothing new...</p>
                    <a asp-controller="Run" asp-action="Index" class="btn btn-primary">Look at some runs?</a>
                </div>
            </div>
        </div>
    }

    <div class="col">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Force?</h5>
                <p class="card-text">Do you want me to recheck everything that I can? This probably messes up the run index. Go to <a asp-controller="Admin" asp-action="Index">operations</a> afterwards to fix this.</p>
                <a asp-controller="Import" asp-action="Force" class="btn btn-primary">Sync with Force!</a>
            </div>
        </div>
    </div>
</div>

@if (Model.Runs.Count() != 0)
{
    <div class="row">
        <div class="col">
            <p>Look what I've found... @Model.Runs.Count() new worlds of which @Model.Runs.Count(x => x.Validity.IsValid) are valid... yay.</p>
        </div>
    </div>

    <div class="row">
        <div class="col">
            <table class="table table-hover">
                <tbody>
                    @foreach (var run in Model.Runs.OrderByDescending(x => x.World.CreatedOn))
                    {
                        <tr>
                            <td>
                                <strong>@($"{count}.")</strong>
                            </td>
                            <td>
                                <a asp-controller="Run" asp-action="Index" asp-route-worldName="@run.World.Name">
                                    @run.World.CreatedOn.ToLocalTime().ToString("dd. MMM yyyy - HH:mm:ss")
                                </a>
                            </td>
                            <td>
                                <time class="timeago" datetime="@run.World.CreatedOn.ToLocalTime().ToString("s")"></time>
                            </td>
                            <td>
                                @foreach (var player in run.Players.OrderBy(x => x.Name))
                                {
                                    <img class="avatar-small" src="@($"/speedrun/img/players/{player.Id}.png")" />
                                }
                            </td>
                            <td>
                                @if (run.Validity.IsValid)
                                {
                                    @switch (run.Outcome.State)
                                    {
                                        case TheFipster.Minecraft.Speedrun.Domain.Outcomes.Finished:
                                            {
                                                <span class="badge badge-success">@run.Outcome.State</span>
                                                break;
                                            }
                                        case TheFipster.Minecraft.Speedrun.Domain.Outcomes.ResetEnd:
                                            {
                                                <span class="badge badge-secondary">@run.Outcome.State</span>
                                                break;
                                            }
                                        case TheFipster.Minecraft.Speedrun.Domain.Outcomes.ResetStronghold:
                                            {
                                                <span class="badge badge-primary">@run.Outcome.State</span>
                                                break;
                                            }
                                        case TheFipster.Minecraft.Speedrun.Domain.Outcomes.ResetNether:
                                            {
                                                <span class="badge badge-warning">@run.Outcome.State</span>
                                                break;
                                            }
                                        case TheFipster.Minecraft.Speedrun.Domain.Outcomes.ResetSpawn:
                                            {
                                                <span class="badge badge-light">@run.Outcome.State</span>
                                                break;
                                            }
                                    }
                                }
                                else
                                {
                                    <span class="badge badge-danger">Invalid</span>
                                }
                            </td>
                        </tr>
                        count--;
                    }
                </tbody>
            </table>
        </div>
    </div>
}
